{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-authorize"
      }
    },
    "SignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-signUp"
      }
    },
    "SignInLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-signIn"
      }
    },
    "AddLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-addLink"
      }
    },
    "GetLinksByEmailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-getLinksByEmail"
      }
    },
    "DeactivateLinkByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-deactivateLinkById"
      }
    },
    "RedirectLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-redirectLink"
      }
    },
    "DeactivateLinksByCronLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-deactivateLinksByCron"
      }
    },
    "PublisherLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-publisher"
      }
    },
    "JobsWorkerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-jobsWorker"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "shortlinker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LinksTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "sqs:SendMessage",
                    "sqs:SendMessageBatch"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ChangeMessageVisibility"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "jobsQueueCEDBAE3E",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "jobsQueueCEDBAE3E",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "shortlinker",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-ed5830cf-ee9f-42ee-a374-b524e9878601"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AuthorizeLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SignUpLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SignInLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AddLinkLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GetLinksByEmailLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeactivateLinkByIdLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "RedirectLinkLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeactivateLinksByCronLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "PublisherLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "JobsWorkerLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "AuthorizeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_authorize.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-authorize",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizeLogGroup"
      ]
    },
    "SignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_signUp.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-signUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUpLogGroup"
      ]
    },
    "SignInLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_signIn.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-signIn",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignInLogGroup"
      ]
    },
    "AddLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_addLink.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-addLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddLinkLogGroup"
      ]
    },
    "GetLinksByEmailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_getLinksByEmail.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-getLinksByEmail",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetLinksByEmailLogGroup"
      ]
    },
    "DeactivateLinkByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_deactivateLinkById.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-deactivateLinkById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeactivateLinkByIdLogGroup"
      ]
    },
    "RedirectLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_redirectLink.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-redirectLink",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RedirectLinkLogGroup"
      ]
    },
    "DeactivateLinksByCronLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_deactivateLinksByCron.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-deactivateLinksByCron",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeactivateLinksByCronLogGroup"
      ]
    },
    "PublisherLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_publisher.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-publisher",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PublisherLogGroup"
      ]
    },
    "JobsWorkerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/shortlinker.zip"
        },
        "Handler": "s_jobsWorker.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-jobsWorker",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "QUEUE_URL": {
              "Ref": "jobsQueueCEDBAE3E"
            },
            "HOST_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.amazonaws.com/dev"
                ]
              ]
            },
            "ACCESS_KEY": "qwerty12345",
            "REFRESH_KEY": "12345qwerty",
            "SENDER_EMAIL": "safonikv@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "JobsWorkerLogGroup"
      ]
    },
    "AuthorizeLambdaVersionOScC4hrGduG7hibvwqzMV9FrhBMRjjFunBgr6RiFtY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizeLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "SignUpLambdaVersionLVd4FOg7YHIwAoC6B9w5HLAb9XfYxrPqyjtZMWzI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignUpLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "SignInLambdaVersionKUkg3eu50uNNnnHjQMWbFTBkP5rUtB1zbYbEQwdag": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignInLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "AddLinkLambdaVersiontv1tmZ76Qu5GpacGQDJ1AxtRyAn6wkjBEIaenei5DkQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddLinkLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "GetLinksByEmailLambdaVersionjq83T2Yc6PQTRS5HY7SrGVjLZUTpaahouMR9Y2qvqQo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetLinksByEmailLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "DeactivateLinkByIdLambdaVersiongV8lAkOIK3ZMH6ApVZWkCd5HpMsIM7iG5qdqD0BEhM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateLinkByIdLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "RedirectLinkLambdaVersion64bBGpdrTqXz175R7jPFXwhYYXohlMXZVKdrRqS0d8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RedirectLinkLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "DeactivateLinksByCronLambdaVersionpZ2I37SS4fP6DYqjvPe4ZmOCtUxMMfEBLpacBBGgL8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateLinksByCronLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "PublisherLambdaVersion5wT2oIEkfslhkDLtDl92MyFJwLtNBPZh1UgoqkBV4o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PublisherLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "JobsWorkerLambdaVersionOYizKD1wMLcG0e2YcEmRQ2ct82r5kfARBTYHmIZb2L0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JobsWorkerLambdaFunction"
        },
        "CodeSha256": "MIXh+jhk9abl6Y5539VT3Ry/bDqoF9XC8zQjmaDddgI="
      }
    },
    "DeactivateLinksByCronEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(2 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DeactivateLinksByCronLambdaFunction",
                "Arn"
              ]
            },
            "Id": "deactivateLinksByCronSchedule"
          }
        ]
      }
    },
    "DeactivateLinksByCronLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeactivateLinksByCronLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DeactivateLinksByCronEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-shortlinker",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignDashup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "sign-up",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignDashin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "sign-in",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "link",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkAdd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "add",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkDeactivate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "deactivate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkDeactivateIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLinkDeactivate"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "links",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignDashupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignDashup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignUpLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayShortlinkerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayUserModelModel"
          }
        }
      },
      "DependsOn": [
        "SignUpLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthSignDashinPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignDashin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignInLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayShortlinkerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayUserModelModel"
          }
        }
      },
      "DependsOn": [
        "SignInLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLinkAddPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizeApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddLinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayShortlinkerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayLinkModelModel"
          }
        }
      },
      "DependsOn": [
        "AuthorizeApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodLinksGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizeApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetLinksByEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AuthorizeApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodLinkDeactivateIdVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkDeactivateIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizeApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeactivateLinkByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AuthorizeApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizeApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RedirectLinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AuthorizeApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayShortlinkerRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "shortlinker-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayUserModelModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Schema": {
          "definitions": {},
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "title": "The Root Schema",
          "required": [
            "email",
            "password"
          ],
          "properties": {
            "email": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"
            },
            "password": {
              "type": "string",
              "minLength": 8,
              "maxLength": 20
            }
          }
        },
        "ContentType": "application/json",
        "Name": "UserModel",
        "Description": "Validation model for Users"
      }
    },
    "ApiGatewayLinkModelModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Schema": {
          "definitions": {},
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "title": "The Root Schema",
          "required": [
            "link",
            "expiration_time"
          ],
          "properties": {
            "link": {
              "type": "string",
              "pattern": "^http.*"
            },
            "expiration_time": {
              "type": "string",
              "enum": [
                "one-time",
                "1d",
                "3d",
                "7d"
              ]
            }
          }
        },
        "ContentType": "application/json",
        "Name": "LinkModel",
        "Description": "Validation model for Links"
      }
    },
    "AuthorizeApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 0,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "authorize",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1700310191612": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAuthSignDashupPost",
        "ApiGatewayMethodAuthSignDashinPost",
        "ApiGatewayMethodLinkAddPost",
        "ApiGatewayMethodLinksGet",
        "ApiGatewayMethodLinkDeactivateIdVarPost",
        "ApiGatewayMethodIdVarGet"
      ]
    },
    "SignUpLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignInLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignInLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddLinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthorizeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetLinksByEmailLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLinksByEmailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeactivateLinkByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeactivateLinkByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RedirectLinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RedirectLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/shortlinker-dev"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "shortlinker",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1700310200192-2023-11-18T12:23:20.192Z/custom-resources.zip"
        },
        "FunctionName": "shortlinker-dev-custom-resource-apigw-cw-role",
        "Handler": "api-gateway-cloud-watch-role/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs16.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "JobsWorkerEventSourceMappingSQSJobsQueueCEDBAE3E": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "MaximumBatchingWindowInSeconds": 0,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "jobsQueueCEDBAE3E",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "JobsWorkerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true,
        "FunctionResponseTypes": [
          "ReportBatchItemFailures"
        ]
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Users",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "LinksTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Links",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "email",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "jobsDlqD18CF374": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600,
        "QueueName": "shortlinker-dev-jobs-dlq"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "jobsQueueCEDBAE3E": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "shortlinker-dev-jobs",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "jobsDlqD18CF374",
              "Arn"
            ]
          },
          "maxReceiveCount": 3
        },
        "VisibilityTimeout": 36
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-ServerlessDeploymentBucketName"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": "sls-shortlinker-dev-EnterpriseLogAccessIamRole"
      }
    },
    "AuthorizeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizeLambdaVersionOScC4hrGduG7hibvwqzMV9FrhBMRjjFunBgr6RiFtY"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-AuthorizeLambdaFunctionQualifiedArn"
      }
    },
    "SignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignUpLambdaVersionLVd4FOg7YHIwAoC6B9w5HLAb9XfYxrPqyjtZMWzI"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-SignUpLambdaFunctionQualifiedArn"
      }
    },
    "SignInLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignInLambdaVersionKUkg3eu50uNNnnHjQMWbFTBkP5rUtB1zbYbEQwdag"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-SignInLambdaFunctionQualifiedArn"
      }
    },
    "AddLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddLinkLambdaVersiontv1tmZ76Qu5GpacGQDJ1AxtRyAn6wkjBEIaenei5DkQ"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-AddLinkLambdaFunctionQualifiedArn"
      }
    },
    "GetLinksByEmailLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetLinksByEmailLambdaVersionjq83T2Yc6PQTRS5HY7SrGVjLZUTpaahouMR9Y2qvqQo"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-GetLinksByEmailLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateLinkByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateLinkByIdLambdaVersiongV8lAkOIK3ZMH6ApVZWkCd5HpMsIM7iG5qdqD0BEhM"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-DeactivateLinkByIdLambdaFunctionQualifiedArn"
      }
    },
    "RedirectLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RedirectLinkLambdaVersion64bBGpdrTqXz175R7jPFXwhYYXohlMXZVKdrRqS0d8"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-RedirectLinkLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateLinksByCronLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateLinksByCronLambdaVersionpZ2I37SS4fP6DYqjvPe4ZmOCtUxMMfEBLpacBBGgL8"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-DeactivateLinksByCronLambdaFunctionQualifiedArn"
      }
    },
    "PublisherLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PublisherLambdaVersion5wT2oIEkfslhkDLtDl92MyFJwLtNBPZh1UgoqkBV4o"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-PublisherLambdaFunctionQualifiedArn"
      }
    },
    "JobsWorkerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JobsWorkerLambdaVersionOYizKD1wMLcG0e2YcEmRQ2ct82r5kfARBTYHmIZb2L0"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-JobsWorkerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-shortlinker-dev-ServiceEndpoint"
      }
    },
    "jobsQueueArnA5A2FF7E": {
      "Description": "ARN of the \"jobs\" SQS queue.",
      "Value": {
        "Fn::GetAtt": [
          "jobsQueueCEDBAE3E",
          "Arn"
        ]
      }
    },
    "jobsQueueUrl573F5B7A": {
      "Description": "URL of the \"jobs\" SQS queue.",
      "Value": {
        "Ref": "jobsQueueCEDBAE3E"
      }
    },
    "jobsDlqUrl2C7FA9D4": {
      "Description": "URL of the \"jobs\" SQS dead letter queue.",
      "Value": {
        "Ref": "jobsDlqD18CF374"
      }
    }
  }
}