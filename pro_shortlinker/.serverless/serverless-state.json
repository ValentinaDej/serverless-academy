{
  "service": {
    "service": "shortlinker",
    "serviceObject": {
      "name": "shortlinker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "environment": {
        "QUEUE_URL": {
          "Ref": "jobsQueueCEDBAE3E"
        },
        "HOST_URL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.us-east-1.amazonaws.com/dev"
            ]
          ]
        },
        "ACCESS_KEY": "qwerty12345",
        "REFRESH_KEY": "12345qwerty",
        "SENDER_EMAIL": "safonikv@gmail.com"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:BatchWriteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UsersTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "LinksTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "sqs:SendMessage",
                "sqs:SendMessageBatch"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ChangeMessageVisibility"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "jobsQueueCEDBAE3E",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "apiGateway": {
        "request": {
          "schemas": {
            "UserModel": {
              "name": "UserModel",
              "schema": {
                "definitions": {},
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "title": "The Root Schema",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 20
                  }
                }
              },
              "description": "Validation model for Users"
            },
            "LinkModel": {
              "name": "LinkModel",
              "schema": {
                "definitions": {},
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "title": "The Root Schema",
                "required": [
                  "link",
                  "expiration_time"
                ],
                "properties": {
                  "link": {
                    "type": "string",
                    "pattern": "^http.*"
                  },
                  "expiration_time": {
                    "type": "string",
                    "enum": [
                      "one-time",
                      "1d",
                      "3d",
                      "7d"
                    ]
                  }
                }
              },
              "description": "Validation model for Links"
            }
          }
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthorizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-authorize"
            }
          },
          "SignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-signUp"
            }
          },
          "SignInLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-signIn"
            }
          },
          "AddLinkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-addLink"
            }
          },
          "GetLinksByEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-getLinksByEmail"
            }
          },
          "DeactivateLinkByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-deactivateLinkById"
            }
          },
          "RedirectLinkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-redirectLink"
            }
          },
          "DeactivateLinksByCronLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-deactivateLinksByCron"
            }
          },
          "PublisherLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-publisher"
            }
          },
          "JobsWorkerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-jobsWorker"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "shortlinker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "jobsQueueCEDBAE3E",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "shortlinker",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-ed5830cf-ee9f-42ee-a374-b524e9878601"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "AuthorizeLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SignUpLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SignInLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "AddLinkLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetLinksByEmailLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeactivateLinkByIdLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RedirectLinkLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeactivateLinksByCronLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "PublisherLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "JobsWorkerLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AuthorizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_authorize.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-authorize",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizeLogGroup"
            ]
          },
          "SignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_signUp.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-signUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpLogGroup"
            ]
          },
          "SignInLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_signIn.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-signIn",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignInLogGroup"
            ]
          },
          "AddLinkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_addLink.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-addLink",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddLinkLogGroup"
            ]
          },
          "GetLinksByEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_getLinksByEmail.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-getLinksByEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLinksByEmailLogGroup"
            ]
          },
          "DeactivateLinkByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_deactivateLinkById.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-deactivateLinkById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeactivateLinkByIdLogGroup"
            ]
          },
          "RedirectLinkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_redirectLink.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-redirectLink",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RedirectLinkLogGroup"
            ]
          },
          "DeactivateLinksByCronLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_deactivateLinksByCron.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-deactivateLinksByCron",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeactivateLinksByCronLogGroup"
            ]
          },
          "PublisherLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_publisher.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-publisher",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PublisherLogGroup"
            ]
          },
          "JobsWorkerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/shortlinker.zip"
              },
              "Handler": "s_jobsWorker.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-jobsWorker",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "QUEUE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"QUEUE_URL\"]"
                  },
                  "HOST_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"HOST_URL\"]"
                  },
                  "ACCESS_KEY": "qwerty12345",
                  "REFRESH_KEY": "12345qwerty",
                  "SENDER_EMAIL": "safonikv@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JobsWorkerLogGroup"
            ]
          },
          "AuthorizeLambdaVersionKd47b9K9U1S4F0MLJ1kemVr0cH6dfBWy1cJhjKx2Qu8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizeLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "SignUpLambdaVersionTlgN4YvFhTITDS8ILk2lQwy7c9H0GqUb4t6aMl4vM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "SignInLambdaVersionAi2TQrygMKj09uq38uSzJ9EzZ4H96ZeASlqUuzyIJK8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignInLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "AddLinkLambdaVersionxnBt6uECIoXN86l86Sq5xwasSNKD9pW8JZngafkcdQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddLinkLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "GetLinksByEmailLambdaVersioneUSK3OQkqpFk5xbIkkr2LPPeqQKqeUBBlndms9jGEgI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLinksByEmailLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "DeactivateLinkByIdLambdaVersionWQpXgNJzNGSx628oJlnbAXrouuL7hejQDLftYxLvLIQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeactivateLinkByIdLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "RedirectLinkLambdaVersionqRxDc9Rdgnk48CLNvxtbuNp0qJZCO7mPzmNCVa8bX8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RedirectLinkLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "DeactivateLinksByCronLambdaVersionCvcVdjprz01Zq7PtE4QXMpZSEZK5Fdfalnx37a2PM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeactivateLinksByCronLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "PublisherLambdaVersion0CBI0uJiao0alonUSiXPnmMJMF5o7Y0h2gRW27NJTR4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PublisherLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "JobsWorkerLambdaVersionZaxKRVOCsZZp5e6HFFuI7P0fOdiqKR2wtq0PHlXKkMc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JobsWorkerLambdaFunction"
              },
              "CodeSha256": "Y0+7faZhB2prJyV4iBuJEqr6vL+u5R/T+SMoygI+edg="
            }
          },
          "DeactivateLinksByCronEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(2 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DeactivateLinksByCronLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "deactivateLinksByCronSchedule"
                }
              ]
            }
          },
          "DeactivateLinksByCronLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeactivateLinksByCronLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DeactivateLinksByCronEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-shortlinker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSignDashup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "sign-up",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSignDashin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "sign-in",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLink": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "link",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinkAdd": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLink"
              },
              "PathPart": "add",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinkDeactivate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLink"
              },
              "PathPart": "deactivate",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinkDeactivateIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLinkDeactivate"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "links",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthSignDashupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignDashup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignUpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayShortlinkerRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayUserModelModel"
                }
              }
            },
            "DependsOn": [
              "SignUpLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthSignDashinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignDashin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignInLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayShortlinkerRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayUserModelModel"
                }
              }
            },
            "DependsOn": [
              "SignInLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLinkAddPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLinkAdd"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddLinkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayShortlinkerRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayLinkModelModel"
                }
              }
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodLinksGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLinks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLinksByEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodLinkDeactivateIdVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLinkDeactivateIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeactivateLinkByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RedirectLinkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayShortlinkerRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "shortlinker-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayUserModelModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Schema": {
                "$ref": "$[\"service\"][\"provider\"][\"apiGateway\"][\"request\"][\"schemas\"][\"UserModel\"][\"schema\"]"
              },
              "ContentType": "application/json",
              "Name": "UserModel",
              "Description": "Validation model for Users"
            }
          },
          "ApiGatewayLinkModelModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Schema": {
                "$ref": "$[\"service\"][\"provider\"][\"apiGateway\"][\"request\"][\"schemas\"][\"LinkModel\"][\"schema\"]"
              },
              "ContentType": "application/json",
              "Name": "LinkModel",
              "Description": "Validation model for Links"
            }
          },
          "AuthorizeApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 0,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1700308502014": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthSignDashupPost",
              "ApiGatewayMethodAuthSignDashinPost",
              "ApiGatewayMethodLinkAddPost",
              "ApiGatewayMethodLinksGet",
              "ApiGatewayMethodLinkDeactivateIdVarPost",
              "ApiGatewayMethodIdVarGet"
            ]
          },
          "SignUpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignInLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignInLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddLinkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddLinkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLinksByEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLinksByEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeactivateLinkByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeactivateLinkByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RedirectLinkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RedirectLinkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/shortlinker-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "shortlinker",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z/custom-resources.zip"
              },
              "FunctionName": "shortlinker-dev-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "JobsWorkerEventSourceMappingSQSJobsQueueCEDBAE3E": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "jobsQueueCEDBAE3E",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "JobsWorkerLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true,
              "FunctionResponseTypes": [
                "ReportBatchItemFailures"
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "LinksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Links",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "email",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "jobsDlqD18CF374": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "MessageRetentionPeriod": 1209600,
              "QueueName": "shortlinker-dev-jobs-dlq"
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
          },
          "jobsQueueCEDBAE3E": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "shortlinker-dev-jobs",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "jobsDlqD18CF374",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              },
              "VisibilityTimeout": 36
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-shortlinker-dev-EnterpriseLogAccessIamRole"
            }
          },
          "AuthorizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizeLambdaVersionKd47b9K9U1S4F0MLJ1kemVr0cH6dfBWy1cJhjKx2Qu8"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-AuthorizeLambdaFunctionQualifiedArn"
            }
          },
          "SignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpLambdaVersionTlgN4YvFhTITDS8ILk2lQwy7c9H0GqUb4t6aMl4vM"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-SignUpLambdaFunctionQualifiedArn"
            }
          },
          "SignInLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignInLambdaVersionAi2TQrygMKj09uq38uSzJ9EzZ4H96ZeASlqUuzyIJK8"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-SignInLambdaFunctionQualifiedArn"
            }
          },
          "AddLinkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddLinkLambdaVersionxnBt6uECIoXN86l86Sq5xwasSNKD9pW8JZngafkcdQ"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-AddLinkLambdaFunctionQualifiedArn"
            }
          },
          "GetLinksByEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLinksByEmailLambdaVersioneUSK3OQkqpFk5xbIkkr2LPPeqQKqeUBBlndms9jGEgI"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-GetLinksByEmailLambdaFunctionQualifiedArn"
            }
          },
          "DeactivateLinkByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeactivateLinkByIdLambdaVersionWQpXgNJzNGSx628oJlnbAXrouuL7hejQDLftYxLvLIQ"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-DeactivateLinkByIdLambdaFunctionQualifiedArn"
            }
          },
          "RedirectLinkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RedirectLinkLambdaVersionqRxDc9Rdgnk48CLNvxtbuNp0qJZCO7mPzmNCVa8bX8"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-RedirectLinkLambdaFunctionQualifiedArn"
            }
          },
          "DeactivateLinksByCronLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeactivateLinksByCronLambdaVersionCvcVdjprz01Zq7PtE4QXMpZSEZK5Fdfalnx37a2PM"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-DeactivateLinksByCronLambdaFunctionQualifiedArn"
            }
          },
          "PublisherLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PublisherLambdaVersion0CBI0uJiao0alonUSiXPnmMJMF5o7Y0h2gRW27NJTR4"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-PublisherLambdaFunctionQualifiedArn"
            }
          },
          "JobsWorkerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JobsWorkerLambdaVersionZaxKRVOCsZZp5e6HFFuI7P0fOdiqKR2wtq0PHlXKkMc"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-JobsWorkerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-shortlinker-dev-ServiceEndpoint"
            }
          },
          "jobsQueueArnA5A2FF7E": {
            "Description": "ARN of the \"jobs\" SQS queue.",
            "Value": {
              "Fn::GetAtt": [
                "jobsQueueCEDBAE3E",
                "Arn"
              ]
            }
          },
          "jobsQueueUrl573F5B7A": {
            "Description": "URL of the \"jobs\" SQS queue.",
            "Value": {
              "Ref": "jobsQueueCEDBAE3E"
            }
          },
          "jobsDlqUrl2C7FA9D4": {
            "Description": "URL of the \"jobs\" SQS dead letter queue.",
            "Value": {
              "Ref": "jobsDlqD18CF374"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "version": "1.0.0.0",
        "title": "OpenAPI",
        "description": "API docs for Shortlinker Service",
        "securitySchemes": {
          "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "For accessing the protected routes, a valid JWT token must be passed in the header."
          }
        },
        "models": [
          {
            "name": "SignUpResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string"
                },
                "refreshToken": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "SignUpRequest",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                  "description": "Email address with standard format. Must match regex pattern."
                },
                "password": {
                  "type": "string",
                  "minLength": 8,
                  "maxLength": 20,
                  "description": "Password with a length between 8 and 20 characters."
                }
              }
            }
          },
          {
            "name": "SignInRequest",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User's email address for signing in."
                },
                "password": {
                  "type": "string",
                  "description": "User's password for signing in."
                }
              }
            }
          },
          {
            "name": "SignInResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string"
                },
                "refreshToken": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "AddLinkRequest",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "required": [
                "link",
                "expiration_time"
              ],
              "properties": {
                "link": {
                  "type": "string",
                  "description": "The original URL to be shortened. Must start with 'http://' or 'https://'."
                },
                "expiration_time": {
                  "type": "string",
                  "description": "Expiration time for the link. Must be one of the predefined time formats - one-time, 1d, 3d or 7d."
                }
              }
            }
          },
          {
            "name": "AddLinkResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "original": {
                  "type": "string"
                },
                "short": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "RedirectLinkResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the link that was deactivated."
                },
                "email": {
                  "type": "string",
                  "description": "The email associated with the deactivated link."
                }
              }
            }
          },
          {
            "name": "LinksByEmailResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "link": {
                        "type": "string"
                      },
                      "short": {
                        "type": "string"
                      },
                      "expiration_time": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "DeactivateLinkResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the link that was deactivated."
                },
                "email": {
                  "type": "string",
                  "description": "The email associated with the deactivated link."
                }
              }
            }
          },
          {
            "name": "RedirectResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "link": {
                  "type": "string"
                },
                "expiration_time": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "BadRequestResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "NotFoundResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "ErrorResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-lift",
      "serverless-openapi-documentation"
    ],
    "pluginsData": {},
    "functions": {
      "authorize": {
        "handler": "s_authorize.handler",
        "events": [],
        "name": "shortlinker-dev-authorize",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuthorizeLambdaVersionKd47b9K9U1S4F0MLJ1kemVr0cH6dfBWy1cJhjKx2Qu8"
      },
      "signUp": {
        "handler": "s_signUp.handler",
        "events": [
          {
            "http": {
              "path": "auth/sign-up",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": "UserModel"
                }
              },
              "documentation": {
                "summary": "Create User",
                "description": "Creates a new user and sends an email with a generated password.",
                "requestModels": {
                  "application/json": "SignUpRequest"
                },
                "methodResponses": [
                  {
                    "statusCode": 201,
                    "responseBody": {
                      "description": "A user object along with generated API keys."
                    },
                    "responseModels": {
                      "application/json": "SignUpResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request"
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Server error when creating a new user."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-signUp",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignUpLambdaVersionTlgN4YvFhTITDS8ILk2lQwy7c9H0GqUb4t6aMl4vM"
      },
      "signIn": {
        "handler": "s_signIn.handler",
        "events": [
          {
            "http": {
              "path": "auth/sign-in",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": "UserModel"
                }
              },
              "documentation": {
                "summary": "Log In",
                "description": "Authenticates a user with their email and password.",
                "requestModels": {
                  "application/json": "SignInRequest"
                },
                "methodResponses": [
                  {
                    "statusCode": 200,
                    "responseBody": {
                      "description": "Successful authentication with user data."
                    },
                    "responseModels": {
                      "application/json": "SignInResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request"
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Internal Server Error."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-signIn",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignInLambdaVersionAi2TQrygMKj09uq38uSzJ9EzZ4H96ZeASlqUuzyIJK8"
      },
      "addLink": {
        "handler": "s_addLink.handler",
        "events": [
          {
            "http": {
              "path": "link/add",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": "LinkModel"
                }
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "documentation": {
                "summary": "Add Link",
                "description": "Creates a new shortened link with an expiration time.",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestModels": {
                  "application/json": "AddLinkRequest"
                },
                "methodResponses": [
                  {
                    "statusCode": 200,
                    "responseBody": {
                      "description": "Successful response with the details of the shortened link."
                    },
                    "responseModels": {
                      "application/json": "AddLinkResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request"
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Internal Server Error."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-addLink",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddLinkLambdaVersionxnBt6uECIoXN86l86Sq5xwasSNKD9pW8JZngafkcdQ"
      },
      "getLinksByEmail": {
        "handler": "s_getLinksByEmail.handler",
        "events": [
          {
            "http": {
              "path": "links",
              "method": "get",
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "documentation": {
                "summary": "Get Links by Email",
                "description": "Retrieves a list of links associated with the user's email.",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": 200,
                    "responseBody": {
                      "description": "A list of links associated with the user's email."
                    },
                    "responseModels": {
                      "application/json": "LinksByEmailResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request."
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Internal Server Error."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-getLinksByEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetLinksByEmailLambdaVersioneUSK3OQkqpFk5xbIkkr2LPPeqQKqeUBBlndms9jGEgI"
      },
      "deactivateLinkById": {
        "handler": "s_deactivateLinkById.handler",
        "events": [
          {
            "http": {
              "path": "link/deactivate/{id}",
              "method": "post",
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "documentation": {
                "summary": "Deactivate Link by ID",
                "description": "Deactivates a specific link based on its ID.",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "pathParams": [
                  {
                    "name": "id",
                    "description": "The id for a short link",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": 200,
                    "responseBody": {
                      "description": "Successful deactivation of the link."
                    },
                    "responseModels": {
                      "application/json": "DeactivateLinkResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request."
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Internal Server Error."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-deactivateLinkById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeactivateLinkByIdLambdaVersionWQpXgNJzNGSx628oJlnbAXrouuL7hejQDLftYxLvLIQ"
      },
      "redirectLink": {
        "handler": "s_redirectLink.handler",
        "events": [
          {
            "http": {
              "path": "{id}",
              "method": "get",
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "documentation": {
                "summary": "Redirect to Original Link",
                "description": "Redirects the user to the original link based on the provided shortened link ID.",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "pathParams": [
                  {
                    "name": "id",
                    "description": "The id for a short link",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "methodResponses": [
                  {
                    "statusCode": 200,
                    "responseBody": {
                      "description": "Redirect."
                    },
                    "responseModels": {
                      "application/json": "RedirectResponse"
                    }
                  },
                  {
                    "statusCode": 400,
                    "responseBody": {
                      "description": "Bad Request."
                    },
                    "responseModels": {
                      "application/json": "BadRequestResponse"
                    }
                  },
                  {
                    "statusCode": 404,
                    "responseBody": {
                      "description": "Not Found."
                    },
                    "responseModels": {
                      "application/json": "NotFoundResponse"
                    }
                  },
                  {
                    "statusCode": 500,
                    "responseBody": {
                      "description": "Internal Server Error."
                    },
                    "responseModels": {
                      "application/json": "ErrorResponse"
                    }
                  }
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-redirectLink",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RedirectLinkLambdaVersionqRxDc9Rdgnk48CLNvxtbuNp0qJZCO7mPzmNCVa8bX8"
      },
      "deactivateLinksByCron": {
        "handler": "s_deactivateLinksByCron.handler",
        "events": [
          {
            "schedule": "rate(2 minutes)"
          }
        ],
        "name": "shortlinker-dev-deactivateLinksByCron",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeactivateLinksByCronLambdaVersionCvcVdjprz01Zq7PtE4QXMpZSEZK5Fdfalnx37a2PM"
      },
      "publisher": {
        "handler": "s_publisher.handler",
        "events": [],
        "name": "shortlinker-dev-publisher",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PublisherLambdaVersion0CBI0uJiao0alonUSiXPnmMJMF5o7Y0h2gRW27NJTR4"
      },
      "jobsWorker": {
        "handler": "s_jobsWorker.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][5][\"Resource\"][0]"
              },
              "batchSize": 1,
              "maximumBatchingWindow": 0,
              "functionResponseType": "ReportBatchItemFailures"
            }
          }
        ],
        "name": "shortlinker-dev-jobsWorker",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "JobsWorkerLambdaVersionZaxKRVOCsZZp5e6HFFuI7P0fOdiqKR2wtq0PHlXKkMc"
      }
    },
    "resources": {
      "Resources": {
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Users",
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "LinksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Links",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "email",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "jobsDlqD18CF374": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "MessageRetentionPeriod": 1209600,
            "QueueName": "shortlinker-dev-jobs-dlq"
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete"
        },
        "jobsQueueCEDBAE3E": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "shortlinker-dev-jobs",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "jobsDlqD18CF374",
                  "Arn"
                ]
              },
              "maxReceiveCount": 3
            },
            "VisibilityTimeout": 36
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete"
        }
      },
      "Outputs": {
        "jobsQueueArnA5A2FF7E": {
          "Description": "ARN of the \"jobs\" SQS queue.",
          "Value": {
            "Fn::GetAtt": [
              "jobsQueueCEDBAE3E",
              "Arn"
            ]
          }
        },
        "jobsQueueUrl573F5B7A": {
          "Description": "URL of the \"jobs\" SQS queue.",
          "Value": {
            "Ref": "jobsQueueCEDBAE3E"
          }
        },
        "jobsDlqUrl2C7FA9D4": {
          "Description": "URL of the \"jobs\" SQS dead letter queue.",
          "Value": {
            "Ref": "jobsDlqD18CF374"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "valentinadei",
      "app": "shortlinker",
      "service": "shortlinker",
      "frameworkVersion": "3",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "environment": {
          "QUEUE_URL": "${Token[TOKEN.16]}",
          "HOST_URL": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.us-east-1.amazonaws.com/dev"
              ]
            ]
          },
          "ACCESS_KEY": "qwerty12345",
          "REFRESH_KEY": "12345qwerty",
          "SENDER_EMAIL": "safonikv@gmail.com"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:BatchWriteItem"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "UsersTable",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "LinksTable",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ses:SendEmail",
                  "sqs:SendMessage",
                  "sqs:SendMessageBatch"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sqs:SendMessage",
                  "sqs:ChangeMessageVisibility"
                ],
                "Resource": [
                  "${Token[TOKEN.28]}"
                ]
              }
            ]
          }
        },
        "apiGateway": {
          "request": {
            "schemas": {
              "UserModel": {
                "name": "UserModel",
                "schema": {
                  "definitions": {},
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "title": "The Root Schema",
                  "required": [
                    "email",
                    "password"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"
                    },
                    "password": {
                      "type": "string",
                      "minLength": 8,
                      "maxLength": 20
                    }
                  }
                },
                "description": "Validation model for Users"
              },
              "LinkModel": {
                "name": "LinkModel",
                "schema": {
                  "definitions": {},
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "title": "The Root Schema",
                  "required": [
                    "link",
                    "expiration_time"
                  ],
                  "properties": {
                    "link": {
                      "type": "string",
                      "pattern": "^http.*"
                    },
                    "expiration_time": {
                      "type": "string",
                      "enum": [
                        "one-time",
                        "1d",
                        "3d",
                        "7d"
                      ]
                    }
                  }
                },
                "description": "Validation model for Links"
              }
            }
          }
        },
        "stage": "dev",
        "versionFunctions": true
      },
      "functions": {
        "authorize": {
          "handler": "build/functions/authorize.handler",
          "events": [],
          "name": "shortlinker-dev-authorize"
        },
        "signUp": {
          "handler": "build/functions/api/auth/signUp.handler",
          "events": [
            {
              "http": {
                "path": "auth/sign-up",
                "method": "post",
                "request": {
                  "schemas": {
                    "application/json": "UserModel"
                  }
                },
                "documentation": {
                  "summary": "Create User",
                  "description": "Creates a new user and sends an email with a generated password.",
                  "requestModels": {
                    "application/json": "SignUpRequest"
                  },
                  "methodResponses": [
                    {
                      "statusCode": 201,
                      "responseBody": {
                        "description": "A user object along with generated API keys."
                      },
                      "responseModels": {
                        "application/json": "SignUpResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request"
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Server error when creating a new user."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-signUp"
        },
        "signIn": {
          "handler": "build/functions/api/auth/signIn.handler",
          "events": [
            {
              "http": {
                "path": "auth/sign-in",
                "method": "post",
                "request": {
                  "schemas": {
                    "application/json": "UserModel"
                  }
                },
                "documentation": {
                  "summary": "Log In",
                  "description": "Authenticates a user with their email and password.",
                  "requestModels": {
                    "application/json": "SignInRequest"
                  },
                  "methodResponses": [
                    {
                      "statusCode": 200,
                      "responseBody": {
                        "description": "Successful authentication with user data."
                      },
                      "responseModels": {
                        "application/json": "SignInResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request"
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Internal Server Error."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-signIn"
        },
        "addLink": {
          "handler": "build/functions/api/link/addLink.handler",
          "events": [
            {
              "http": {
                "path": "link/add",
                "method": "post",
                "request": {
                  "schemas": {
                    "application/json": "LinkModel"
                  }
                },
                "authorizer": {
                  "name": "authorize",
                  "resultTtlInSeconds": 0,
                  "identitySource": "method.request.header.Authorization",
                  "type": "token"
                },
                "documentation": {
                  "summary": "Add Link",
                  "description": "Creates a new shortened link with an expiration time.",
                  "security": [
                    {
                      "bearerAuth": []
                    }
                  ],
                  "requestModels": {
                    "application/json": "AddLinkRequest"
                  },
                  "methodResponses": [
                    {
                      "statusCode": 200,
                      "responseBody": {
                        "description": "Successful response with the details of the shortened link."
                      },
                      "responseModels": {
                        "application/json": "AddLinkResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request"
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Internal Server Error."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-addLink"
        },
        "getLinksByEmail": {
          "handler": "build/functions/api/link/getLinksByEmail.handler",
          "events": [
            {
              "http": {
                "path": "links",
                "method": "get",
                "authorizer": {
                  "name": "authorize",
                  "resultTtlInSeconds": 0,
                  "identitySource": "method.request.header.Authorization",
                  "type": "token"
                },
                "documentation": {
                  "summary": "Get Links by Email",
                  "description": "Retrieves a list of links associated with the user's email.",
                  "security": [
                    {
                      "bearerAuth": []
                    }
                  ],
                  "methodResponses": [
                    {
                      "statusCode": 200,
                      "responseBody": {
                        "description": "A list of links associated with the user's email."
                      },
                      "responseModels": {
                        "application/json": "LinksByEmailResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request."
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Internal Server Error."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-getLinksByEmail"
        },
        "deactivateLinkById": {
          "handler": "build/functions/api/link/deactivateLinkById.handler",
          "events": [
            {
              "http": {
                "path": "link/deactivate/{id}",
                "method": "post",
                "authorizer": {
                  "name": "authorize",
                  "resultTtlInSeconds": 0,
                  "identitySource": "method.request.header.Authorization",
                  "type": "token"
                },
                "documentation": {
                  "summary": "Deactivate Link by ID",
                  "description": "Deactivates a specific link based on its ID.",
                  "security": [
                    {
                      "bearerAuth": []
                    }
                  ],
                  "pathParams": [
                    {
                      "name": "id",
                      "description": "The id for a short link",
                      "schema": {
                        "type": "string"
                      }
                    }
                  ],
                  "methodResponses": [
                    {
                      "statusCode": 200,
                      "responseBody": {
                        "description": "Successful deactivation of the link."
                      },
                      "responseModels": {
                        "application/json": "DeactivateLinkResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request."
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Internal Server Error."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-deactivateLinkById"
        },
        "redirectLink": {
          "handler": "build/functions/api/link/redirectLink.handler",
          "events": [
            {
              "http": {
                "path": "/{id}",
                "method": "get",
                "authorizer": {
                  "name": "authorize",
                  "resultTtlInSeconds": 0,
                  "identitySource": "method.request.header.Authorization",
                  "type": "token"
                },
                "documentation": {
                  "summary": "Redirect to Original Link",
                  "description": "Redirects the user to the original link based on the provided shortened link ID.",
                  "security": [
                    {
                      "bearerAuth": []
                    }
                  ],
                  "pathParams": [
                    {
                      "name": "id",
                      "description": "The id for a short link",
                      "schema": {
                        "type": "string"
                      }
                    }
                  ],
                  "methodResponses": [
                    {
                      "statusCode": 200,
                      "responseBody": {
                        "description": "Redirect."
                      },
                      "responseModels": {
                        "application/json": "RedirectResponse"
                      }
                    },
                    {
                      "statusCode": 400,
                      "responseBody": {
                        "description": "Bad Request."
                      },
                      "responseModels": {
                        "application/json": "BadRequestResponse"
                      }
                    },
                    {
                      "statusCode": 404,
                      "responseBody": {
                        "description": "Not Found."
                      },
                      "responseModels": {
                        "application/json": "NotFoundResponse"
                      }
                    },
                    {
                      "statusCode": 500,
                      "responseBody": {
                        "description": "Internal Server Error."
                      },
                      "responseModels": {
                        "application/json": "ErrorResponse"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "name": "shortlinker-dev-redirectLink"
        },
        "deactivateLinksByCron": {
          "handler": "build/functions/api/link/deactivateLinksByCron.handler",
          "events": [
            {
              "schedule": "rate(2 minutes)"
            }
          ],
          "name": "shortlinker-dev-deactivateLinksByCron"
        },
        "publisher": {
          "handler": "build/functions/api/email/publisher.handler",
          "events": [],
          "name": "shortlinker-dev-publisher"
        },
        "jobsWorker": {
          "handler": "build/functions/api/email/worker.handler",
          "events": [
            {
              "sqs": {
                "arn": "${Token[TOKEN.28]}",
                "batchSize": 1,
                "maximumBatchingWindow": 0,
                "functionResponseType": "ReportBatchItemFailures"
              }
            }
          ],
          "name": "shortlinker-dev-jobsWorker"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "LinksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Links",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "email",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        }
      },
      "constructs": {
        "jobs": {
          "type": "queue",
          "worker": {
            "handler": "build/functions/api/email/worker.handler",
            "events": [
              {
                "sqs": {
                  "arn": "${Token[TOKEN.28]}",
                  "batchSize": 1,
                  "maximumBatchingWindow": 0,
                  "functionResponseType": "ReportBatchItemFailures"
                }
              }
            ]
          }
        }
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "documentation": {
          "version": "1.0.0.0",
          "title": "OpenAPI",
          "description": "API docs for Shortlinker Service",
          "securitySchemes": {
            "bearerAuth": {
              "type": "apiKey",
              "name": "Authorization",
              "in": "header",
              "description": "For accessing the protected routes, a valid JWT token must be passed in the header."
            }
          },
          "models": [
            {
              "name": "SignUpResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string"
                  },
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "SignUpRequest",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$",
                    "description": "Email address with standard format. Must match regex pattern."
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 20,
                    "description": "Password with a length between 8 and 20 characters."
                  }
                }
              }
            },
            {
              "name": "SignInRequest",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email address for signing in."
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password for signing in."
                  }
                }
              }
            },
            {
              "name": "SignInResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string"
                  },
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "AddLinkRequest",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "required": [
                  "link",
                  "expiration_time"
                ],
                "properties": {
                  "link": {
                    "type": "string",
                    "description": "The original URL to be shortened. Must start with 'http://' or 'https://'."
                  },
                  "expiration_time": {
                    "type": "string",
                    "description": "Expiration time for the link. Must be one of the predefined time formats - one-time, 1d, 3d or 7d."
                  }
                }
              }
            },
            {
              "name": "AddLinkResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "original": {
                    "type": "string"
                  },
                  "short": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "RedirectLinkResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the link that was deactivated."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email associated with the deactivated link."
                  }
                }
              }
            },
            {
              "name": "LinksByEmailResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "links": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "link": {
                          "type": "string"
                        },
                        "short": {
                          "type": "string"
                        },
                        "expiration_time": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "name": "DeactivateLinkResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the link that was deactivated."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email associated with the deactivated link."
                  }
                }
              }
            },
            {
              "name": "RedirectResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  },
                  "expiration_time": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "BadRequestResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "NotFoundResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "name": "ErrorResponse",
              "contentType": "application/json",
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "app": "shortlinker",
    "org": "valentinadei",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "ed5830cf-ee9f-42ee-a374-b524e9878601",
    "appUid": "YcqfkRhcKJBQCNMt8L",
    "artifact": "/Users/vally/Documents/GitHub/serverless-academy/pro_shortlinker/.serverless/shortlinker.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/shortlinker/dev/1700308510559-2023-11-18T11:55:10.559Z",
    "artifact": "shortlinker.zip"
  }
}